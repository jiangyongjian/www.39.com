<?php
/**
 * Created by PhpStorm.
 * User: jiangyongjian
 * Date: 2018/8/16
 * Time: 上午10:39
 */

namespace Admin\Model;
use Think\Model;

class GoodsModel extends Model {
    // 添加时滴啊用create方法允许接收的字段
    protected $inserFields = 'goos_name, market_price, shop_price, is_on_sale, goods_desc';


    // 定义验证规则
    protected $_validate = array(
        array('goods_name', 'require', '商品名称不能为空！', 1),
        array('market_price', 'currency', '市场价格必须是货币类型！', 1),
        array('shop_price', 'currency', '本店价格必须是货币类型！', 1),
    );

    protected function _before_insert(&$data, $options)
    {
//        parent::_before_insert($data, $options); // TODO: Change the autogenerated stub

        // 处理logo
        // 判断有没有图片
        if ($_FILES['logo']) {
            $upload = new \Think\Upload(); // 实例化上传类
            $upload->maxSize = 1024 * 1024 ; // 1M
            $upload->exts = array('jpg', 'gif', 'png', 'jpeg');// 设置附件上传类型
            $upload->rootPath = './Public/Uploads/'; // 设置附件上传根目录
            $upload->savePath = 'Goods/'; // 设置附件上传（子）目录
            // 上传文件
            $info = $upload->upload();

            if (!$info) {
                // 获取失败原因把错误信息保存到 模型的error属性中，然后在控制器里会调用$model->getError()获取到错误信息并由控制器打印
                $this->error = $upload->getError();
                return false;
            } else {
                // 生成缩略图
                // 先拼出原图的上传路径
                $logo = $info['logo']['savepath'] . $info['logo']['savename'];
                // 拼出缩略图的路径和名称
                $mbiglogo = $info['logo']['savepath'] . 'mbig_' . $info['logo']['savename'];
                $biglogo = $info['logo']['savepath'] . 'big_' . $info['logo']['savename'];
                $midlogo = $info['logo']['savepath'] . 'mid_' . $info['logo']['savename'];
                $smlogo = $info['logo']['savepath'] . 'sm_' . $info['logo']['savename'];

                $image = new \Think\Image();


                // 打开要生成缩略图的图片
                $image->open('./Public/Uploads/'.$logo);

                // 生成缩略图
                $image->thumb(700, 700)->save('./Public/Uploads/'.$mbiglogo);
                $image->thumb(350, 350)->save('./Public/Uploads/'.$biglogo);
                $image->thumb(130, 130)->save('./Public/Uploads/'.$midlogo);
                $image->thumb(50, 50)->save('./Public/Uploads/'.$smlogo);

                // 把路径放到表单中
                $data['logo'] = $logo;
                $data['mbig_logo'] = $mbiglogo;
                $data['big_logo'] = $biglogo;
                $data['mid_logo'] = $midlogo;
                $data['sm_logo'] = $smlogo;
            }
        }

        $data['addtime'] = date('Y-m-d H:i:s', time());
        // 我们自己来过滤这个字段
        $data['goods_desc'] = removeXSS($_POST['goods_desc']);
    }

    /**
     * 实现翻页，收索，排序
     */
    public function search($perPage = 5) {
        /*************** 收索 ***************/

        /*************** 翻页 ***************/
        // 取出总的记录数
        $count = $this->count();
        // 生成翻页类对象
        $pageObj = new \Think\Page($count, $perPage);

        $pageObj->setConfig('next', '下一页');
        $pageObj->setConfig('prev', '上一页');
        // 生成页面下显示的上一页，下一也的字符串
        $pageString = $pageObj->show();

        // 取某一页的数据
        $data = $this->limit($pageObj->firstRow.','.$pageObj->listRows)->select();

//        dump($pageObj->firstRow);
//        dump($pageObj->listRows);
//        die();

        // 返回数据
        return array(
            'data'=>$data, // 数据
            'page'=>$pageString, // 翻页字符串
        );
    }
}



